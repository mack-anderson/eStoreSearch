/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eStoreSearch;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.ArrayList;

public class UserInputTest {
    
    @Test public void testSettersAndGetters(){ // Test setters and getters by setting values and then comparing output using getters. 
        UserInput input = new UserInput(); 
        EStoreSearch eStore = new EStoreSearch();
        input.setFile("file");
        input.setEStore(eStore);
        assertTrue("file".equals(input.getFile()));
        assertTrue(eStore.equals(input.getEStore()));
    }
    @Test public void testFileInputOutput(){
        //Check if output file matches input file
        UserInput input = new UserInput();
        ArrayList <String> stringInput = new ArrayList <String>(); ;
        ArrayList <String> stringOutput = new ArrayList <String>(); ;
        input.fileInput("TestValidInput.txt");
        stringInput = input.getEStore().toStringOutputStrings();
        input.fileOutput("TestOutput.txt");

        UserInput output = new UserInput();
        output.fileInput("TestOutput.txt");
        stringOutput = output.getEStore().toStringOutputStrings();
        assertTrue(stringInput.equals(stringOutput));

        //Check that output file does not match (nonexisting compare file)
        input = new UserInput();
        stringInput = new ArrayList <String>(); ;
        stringOutput = new ArrayList <String>(); ;
        input.fileInput("TestValidInput.txt");
        stringInput = input.getEStore().toStringOutputStrings();
        input.fileOutput("TestOutput.txt");

        output = new UserInput();
        output.fileInput("something");
        stringOutput = output.getEStore().toStringOutputStrings();
        assertFalse(stringInput.equals(stringOutput));

        //Check that products added after file import are outputted as well
        input = new UserInput();
        stringInput = new ArrayList <String>(); ;
        stringOutput = new ArrayList <String>(); ;
        input.fileInput("TestValidInput.txt");
        try {
            input.getEStore().addBook("999999", "test description", "999.99", "9999", "Author Author", "Publisher");
        } catch (Exception e) {
            fail();
        }
        stringInput = input.getEStore().toStringOutputStrings();
        input.fileOutput("AddedTestOutput.txt");

        output = new UserInput();
        output.fileInput("AddedTestOutput.txt");
        stringOutput = output.getEStore().toStringOutputStrings();
        assertTrue(stringInput.equals(stringOutput));
    }
    

    @Test public void testInputYear() {
        UserInput input = new UserInput();
        int[] temp;

        try { // check for proper output given input string
            temp = input.inputYear("-5000");
            assertTrue(temp[0] == 5000 && temp[1] == 0 && temp[2] == 1);
        } catch (FormatException e) {
            fail();
        }

        try { // check for proper output given input string
            temp = input.inputYear("5000-");
            assertTrue(temp[0] == 5000 && temp[1] == 0 && temp[2] == 2);
        } catch (FormatException e) {
            fail();
        }

        try { // check for proper output given input string
            temp = input.inputYear("5000");
            assertTrue(temp[0] == 5000 && temp[1] == 0 && temp[2] == 0);
        } catch (FormatException e) {
            fail();
        }

        try { // check for proper output given input string
            temp = input.inputYear("5000-6000");
            assertTrue(temp[0] == 5000 && temp[1] == 6000 && temp[2] == 0);
        } catch (FormatException e) {
            fail();
        }
    }
}
